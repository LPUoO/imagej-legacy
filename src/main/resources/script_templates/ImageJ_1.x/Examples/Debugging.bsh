/*-
 * #%L
 * ImageJ software for multidimensional image processing and analysis.
 * %%
 * Copyright (C) 2009 - 2018 Board of Regents of the University of
 * Wisconsin-Madison, Broad Institute of MIT and Harvard, and Max Planck
 * Institute of Molecular Cell Biology and Genetics.
 * %%
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * #L%
 */
// For debugging: allow access to protected and private fields and methods
setAccessibility(true);

// Set some variables
ijDir = System.getProperty("ij.dir");
image = WindowManager.getCurrentImage();
frames = WindowManager.getNonImageWindows();

// Useful functions
fullClassName(className) {
	names = new fiji.scripting.completion.ClassNames(null);
	functions = new fiji.scripting.ClassNameFunctions(names);
	return functions.getFullName(className);
}

dir(className, methodNameRegex) { // return methods matching regex
	try {
		clazz = IJ.getClassLoader().loadClass(className);
	} catch (Exception e) {
		className = fullClassName(className);
		clazz = IJ.getClassLoader().loadClass(className);
	}
	result = new java.util.ArrayList();
	for (java.lang.reflect.Method method : clazz.getMethods())
		if (methodNameRegex == null || method.getName().matches(methodNameRegex))
			result.add(method);
	return result;
}
dir(className) {
	return dir(className, null);
}

getWindow(regex) {
	for (Object image : WindowManager.imageList)
		if (image.getTitle().matches(regex))
			return image;
	for (Object frame : WindowManager.nonImageList)
		if (frame.getTitle().matches(regex))
			return frame;
	throw new Exception("Not found: " + regex);
}

import java.awt.Component;
import java.awt.Container;
getDescendants(container, regex) {
	result = new java.util.ArrayList();
	for (Component child : container.getComponents()) {
		if (child.getClass().getName().matches(regex))
			result.add(child);
		if (child instanceof Container)
			result.addAll(getDescendants(child, regex));
	}
	return result;
}

// Useful commands
// print(ijDir);
// image.unlock();
// fiji.debugging.Object_Inspector.openFrame("Inspector", image);
// print(dir("ImagePlus", ".*Color.*"));
// clown = getWindow("(?i)clown").getImagePlus();
// print(ij.io.OpenDialog.class.getConstructors());
// print(getDescendants(getWindow(".*bsh.*"), ".*Text.*"));
